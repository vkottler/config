---
name: Python Package

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  TWINE_PASSWORD: ${{"{{secrets.TWINE_PASSWORD}}"}}
  GITHUB_API_TOKEN: ${{"{{secrets.API_TOKEN}}"}}
  CODECOV_TOKEN: ${{"{{secrets.CODECOV_TOKEN}}"}}

jobs:
  build:

    runs-on: ${{"{{matrix.system}}"}}
    strategy:
      matrix:
        python-version:
{% if "versions" in python %}
{% for version in python["versions"] %}
          - "{{version}}"
{% endfor %}
{% else %}
          - "{{python["default_version"]}}"
{% endif %}
        system:
{% for system in python["systems"] %}
          - {{system}}
{% endfor %}
    env:
      PYTHON_VERSION: ${{"{{matrix.python-version}}"}}
    steps:
      - uses: actions/checkout@master
        with:
          submodules: recursive

      - name: python${{"{{matrix.python-version}}"}} setup
        uses: actions/setup-python@main
        with:
          python-version: ${{"{{matrix.python-version}}"}}
          cache: pip

{% if package["name"] == "vmklib" %}
      - run: pip${{"{{matrix.python-version}}"}} install -e .
{% elif package["name"] in ["vcorelib", "experimental-lowqa"] %}
      - run: pip${{"{{matrix.python-version}}"}} install -e .
      - run: pip${{"{{matrix.python-version}}"}} install vmklib>=2.0.3
      - run: mk python-editable
{% else %}
      - run: pip${{"{{matrix.python-version}}"}} install vmklib>=2.0.3
{% endif %}
{% if "ci_local" in package and package["ci_local"] %}

      # Begin project-specific setup.
{% for item in package["ci_local"] %}
      {{item}}
{% endfor %}
      # End project-specific setup.
{% endif %}

      - run: mk python-sa-types

      - name: lint and build
        run: mk python-lint python-sa yaml python-build-once
        env:
          PY_LINT_MYPY_EXTRA_ARGS: --no-incremental

      - run: mk docs
        if: |
          matrix.python-version == '{{python["default_version"]}}'
          && matrix.system == 'ubuntu-latest'

      - run: mk python-test
        env:
          PY_TEST_EXTRA_ARGS: --cov-report=xml

      - uses: codecov/codecov-action@v3.1.5
        with:
          fail_ci_if_error: true
          verbose: true
          token: ${{"{{secrets.CODECOV_TOKEN}}"}}

      - run: mk pypi-upload-ci
        env:
          TWINE_USERNAME: __token__
        if: |
          matrix.python-version == '{{python["default_version"]}}'
          && matrix.system == 'ubuntu-latest'
          && env.TWINE_PASSWORD != ''
          && github.ref_name == 'master'

      - run: |
          mk python-release owner={{python.author_info.username}} \
                            repo={{package.name}} version={{package.version}}
        if: |
          matrix.python-version == '{{python["default_version"]}}'
          && matrix.system == 'ubuntu-latest'
          && env.GITHUB_API_TOKEN != ''
          && github.ref_name == 'master'
