
"""
This package's command-line entry-point (boilerplate).
"""

# built-in
import argparse
{% if "no_chdir_arg" not in package or not package["no_chdir_arg"] %}
import os
from pathlib import Path
{% endif %}
import sys
from typing import List

# third-party
from vcorelib.logging import init_logging, logging_args
{% if "time_command" in package and package["time_command"] %}
from vcorelib.logging import log_time as _log_time
{% endif %}

# internal
{% set pkg_slug = package["name"]|replace("-", "_") %}
from {{pkg_slug}} import DESCRIPTION, VERSION
from {{pkg_slug}}.app import add_app_args, entry


def main(argv: List[str] = None) -> int:
    """Program entry-point."""

    result = 0

    # fall back on command-line arguments
    command_args = sys.argv
    if argv is not None:
        command_args = argv

    # initialize argument parsing
    parser = argparse.ArgumentParser(description=DESCRIPTION)
    parser.add_argument(
        "--version",
        action="version",
        version=f"%(prog)s {VERSION}",
    )
    logging_args(parser)
{% if "no_chdir_arg" not in package or not package["no_chdir_arg"] %}
    parser.add_argument(
        "-C",
        "--dir",
        default=Path.cwd(),
        dest="dir",
        type=Path,
        help="execute from a specific directory",
    )
    starting_dir = Path.cwd()
{% endif %}

    add_app_args(parser)

    # parse arguments and execute the requested command
    try:
        args = parser.parse_args(command_args[1:])
        args.version = VERSION
{% if "no_chdir_arg" not in package or not package["no_chdir_arg"] %}
        args.dir = args.dir.resolve()
{% endif %}
{% if "no_logging_init" not in package or not package["no_logging_init"] %}

        # initialize logging
        init_logging(
            args, default_format="{{package["log_format"]}}"
        )
{% endif %}
{% if "no_chdir_arg" not in package or not package["no_chdir_arg"] %}

        # change to the specified directory
        os.chdir(args.dir)

{% endif %}
        # run the application
{% if "time_command" in package and package["time_command"] %}
        with _log_time(logging.getLogger(__name__), "Command"):
            result = entry(args)
{% else %}
        result = entry(args)
{% endif %}
    except SystemExit as exc:
        result = 1
        if exc.code is not None and isinstance(exc.code, int):
            result = exc.code

{% if "no_chdir_arg" not in package or not package["no_chdir_arg"] %}
    # return to starting dir
    os.chdir(starting_dir)

{% endif %}
    return result
