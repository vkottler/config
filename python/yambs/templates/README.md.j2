{% import __templates__["macros"] as macros %}
# {{project.name}} ([{{macros.version(project)}}]({{macros.url(project)}}))

[![codecov](https://codecov.io/gh/{{project.owner}}/{{project.name}}/branch/{{project.main_branch}}/graph/badge.svg)](https://codecov.io/gh/{{project.owner}}/{{project.name}})
![Build Status](https://github.com/{{project.owner}}/{{project.name}}/actions/workflows/yambs-project.yml/badge.svg)

*{{project.description}}*

## Workflow

Install [vmklib](https://github.com/vkottler/vmklib) such that you can
`mk --version` (a `pip install vmklib` to your desired Python environment is
all that's needed).

From a fresh checkout:

```
git submodule update --init
mk dz-sync
{% if "embedded" in project and project["embedded"] %}
mk download-toolchains
{% endif %}
mk g
```

This should result in fully compiled code that you can now use or add to.


### Generating Interfaces

Structs and enumerations can be defined for
[ifgen](https://github.com/vkottler/ifgen) which can then generate C++ source
code into the project.

Generating configurations based on an
[SVD](https://github.com/vkottler/ifgen/tree/master/ifgen/data/svd) file:

```
mk ifgen-svd-XMC4700
```

Generating code from an `ifgen.yaml` in the root directory of the project:

```
mk ifgen
```
