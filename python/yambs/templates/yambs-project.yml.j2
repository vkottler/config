{% import __templates__["yambs_constants"] as constants %}
---
name: Yambs Project

on:
  push:
    branches: [{{project.main_branch}}]
  pull_request:
    branches: [{{project.main_branch}}]

env:
  GITHUB_API_TOKEN: ${{"{{secrets.API_TOKEN}}"}}
  CODECOV_TOKEN: ${{"{{secrets.CODECOV_TOKEN}}"}}

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    env:
      PYTHON_VERSION: ${{"{{matrix.python-version}}"}}

    steps:
      - uses: actions/checkout@master
        with:
          submodules: recursive

      - uses: seanmiddleditch/gha-setup-ninja@master
        with:
          version: 1.11.1

      - name: python${{"{{matrix.python-version}}"}} setup
        uses: actions/setup-python@main
        with:
          python-version: ${{"{{matrix.python-version}}"}}
          cache: pip

      - run: pip${{"{{matrix.python-version}}"}} install vmklib>=1.8.0 yambs

      - run: mk dz-sync

      - run: mk yaml python-lint python-sa
{% if "embedded" not in project or not project["embedded"] %}

      - name: setup clang {{constants.clang_version}}
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x ./llvm.sh
          sudo ./llvm.sh {{constants.clang_version}}
          rm llvm.sh
{% if "wasm" in project and project["wasm"] %}

      - run: sudo apt-get install emscripten
      - run: emcc --version
      - run: em++ --version
{% endif %}

      - run: sudo apt-get install gcc{{constants.gcc_suffix}} g++{{constants.gcc_suffix}} lcov doxygen clang{{constants.clang_suffix}}{% if "format" not in project or project["format"] %} clang-format{{constants.clang_suffix}}{% endif %}

      # List versions.
      - run: gcc{{constants.gcc_suffix}} --version
      - run: g++{{constants.gcc_suffix}} --version
      - run: clang{{constants.clang_suffix}} --version
      - run: clang++{{constants.clang_suffix}} --version

      - run: mk t variant=clang coverage=false
{% else %}
      - run: sudo apt-get install doxygen{% if "format" not in project or project["format"] %} clang-format{{constants.clang_suffix}}{% endif %}

      - run: mk download-toolchains
      - run: mk g
{% endif %}
      - run: ninja all{% if "format" not in project or project["format"] %} format-check{% endif %}

      - run: mk dist docs{% if "embedded" in project and project["embedded"] %} variant={{project["name"]}}{% endif %}

        if: github.ref_name != '{{project.main_branch}}'
{% if "embedded" not in project or not project["embedded"] %}

      # Need to clean because codecov is not finding coverage otherwise.
      - run: mk c keep={{project["ci_variant"]}}
      - run: mk t variant={{project["ci_variant"]}}

      - uses: codecov/codecov-action@v3.1.5
        with:
          gcov: true
          gcov_include: build/{{project["ci_variant"]}}
          gcov_ignore: .mypy_cache
          gcov_executable: gcov{{constants.gcc_suffix}}
          fail_ci_if_error: true
          verbose: true
          token: ${{"{{secrets.CODECOV_TOKEN}}"}}
{% endif %}

      - run: mk release{% if "embedded" in project and project["embedded"] %} variant={{project["name"]}}{% endif %}

        if: |
          env.GITHUB_API_TOKEN != ''
          && github.ref_name == '{{project.main_branch}}'
